// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.DatabaseContext;

namespace Persistence.DatabaseContext.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Model.DB_Model.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Estado");

                    b.Property<DateTime>("Insert_Datetime");

                    b.Property<string>("Insert_Oper");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("Update_Datetime");

                    b.Property<string>("Update_Oper");

                    b.HasKey("Id");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("Model.DB_Model.CalificacionServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("FechaInsercion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("CalificacionServicio");
                });

            modelBuilder.Entity("Model.DB_Model.Componentes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<bool>("Estado");

                    b.Property<DateTime>("Insert_Datetime");

                    b.Property<string>("Insert_Oper");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("Update_Datetime");

                    b.Property<string>("Update_Oper");

                    b.HasKey("Id");

                    b.ToTable("Componentes");
                });

            modelBuilder.Entity("Model.DB_Model.EMailError", b =>
                {
                    b.Property<long>("IdEmailError")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<string>("ErrorMessage");

                    b.Property<DateTime>("FechaInsercion");

                    b.Property<DateTime>("FechaModificacion");

                    b.Property<string>("FromEMail");

                    b.Property<string>("FromName");

                    b.Property<string>("Subject");

                    b.Property<string>("ToEMail");

                    b.Property<string>("ToName");

                    b.HasKey("IdEmailError");

                    b.ToTable("EMailError");
                });

            modelBuilder.Entity("Model.DB_Model.EquipoPrincipal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<bool>("Estado");

                    b.Property<DateTime>("Insert_Datetime");

                    b.Property<string>("Insert_Oper");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("Update_Datetime");

                    b.Property<string>("Update_Oper");

                    b.HasKey("Id");

                    b.ToTable("EquipoPrincipal");
                });

            modelBuilder.Entity("Model.DB_Model.EquipoSecundario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<bool>("Estado");

                    b.Property<DateTime>("Insert_Datetime");

                    b.Property<string>("Insert_Oper");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("Update_Datetime");

                    b.Property<string>("Update_Oper");

                    b.HasKey("Id");

                    b.ToTable("EquipoSecundario");
                });

            modelBuilder.Entity("Model.DB_Model.EstadoServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("FechaInsercion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("EstadoServicio");
                });

            modelBuilder.Entity("Model.DB_Model.HistorialPassword", b =>
                {
                    b.Property<int>("Id_Historial_Password")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Id_Usuario");

                    b.Property<DateTime>("InsertDatetime");

                    b.Property<string>("Password");

                    b.HasKey("Id_Historial_Password");

                    b.ToTable("HistorialPassword");
                });

            modelBuilder.Entity("Model.DB_Model.Operador", b =>
                {
                    b.Property<int>("IdOperador")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApeYNom");

                    b.Property<int>("AvisarAsignado");

                    b.Property<int>("AvisarSolicitud");

                    b.Property<string>("Contrasenia");

                    b.Property<string>("EMail");

                    b.Property<DateTime>("ExpiraClave");

                    b.Property<DateTime>("InsertDatetime");

                    b.Property<string>("InsertOper");

                    b.Property<sbyte>("Nivel");

                    b.Property<string>("OperadorId");

                    b.Property<int>("Privado");

                    b.Property<string>("SectorId");

                    b.Property<DateTime>("UpdateDatetime");

                    b.Property<string>("UpdateOper");

                    b.HasKey("IdOperador");

                    b.ToTable("Operador");
                });

            modelBuilder.Entity("Model.DB_Model.Parametros", b =>
                {
                    b.Property<int>("ParametrosId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssignTicket");

                    b.Property<string>("Can");

                    b.Property<string>("ContactDefault");

                    b.Property<string>("DateFormat");

                    b.Property<ushort>("DiasPsw");

                    b.Property<string>("FromUserPsw");

                    b.Property<string>("FromUserRequest");

                    b.Property<DateTime>("InsertDatetime");

                    b.Property<string>("InsertOper");

                    b.Property<string>("MainScreenState");

                    b.Property<uint>("MaxAttach");

                    b.Property<ushort>("MaxDifMin");

                    b.Property<uint>("MaxLinesExport");

                    b.Property<ushort>("MaxLinesScreen");

                    b.Property<string>("Pas");

                    b.Property<string>("Pen");

                    b.Property<string>("ProcessDefault");

                    b.Property<string>("StateAlert");

                    b.Property<string>("StateDefault");

                    b.Property<string>("SubcarpetaAdjuntoFichaTec");

                    b.Property<string>("SubcarpetaAdjuntoTicket");

                    b.Property<DateTime>("UpdateDatetime");

                    b.Property<string>("UpdateOper");

                    b.Property<ushort>("ValidezPsw");

                    b.HasKey("ParametrosId");

                    b.ToTable("Parametros");
                });

            modelBuilder.Entity("Model.DB_Model.Planta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<bool>("Estado");

                    b.Property<DateTime>("Insert_Datetime");

                    b.Property<string>("Insert_Oper");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("Update_Datetime");

                    b.Property<string>("Update_Oper");

                    b.HasKey("Id");

                    b.ToTable("Planta");
                });

            modelBuilder.Entity("Model.DB_Model.Prioridad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Fecha_Insercion");

                    b.Property<DateTime?>("Fecha_Modificacion");

                    b.Property<string>("Nombre_Prioridad");

                    b.HasKey("Id");

                    b.ToTable("Prioridad");
                });

            modelBuilder.Entity("Model.DB_Model.Procesos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Fecha_Insercion");

                    b.Property<DateTime?>("Fecha_Modificacion");

                    b.Property<string>("Nombre_Proceso");

                    b.HasKey("Id");

                    b.ToTable("Procesos");
                });

            modelBuilder.Entity("Model.DB_Model.RegistroEquipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("IdComponente");

                    b.Property<int>("IdEquipoPrinc");

                    b.Property<int?>("IdEquipoSec");

                    b.Property<int>("IdPlanta");

                    b.Property<string>("NombreComponente");

                    b.Property<string>("NombreEquipoPrinc");

                    b.Property<string>("NombreEquipoSec");

                    b.Property<string>("NombrePlanta");

                    b.HasKey("Id");

                    b.ToTable("RegistroEquipo");
                });

            modelBuilder.Entity("Model.DB_Model.SigoTicket", b =>
                {
                    b.Property<ulong>("SeqSigoTicketId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Adjunto");

                    b.Property<int>("CambioNumero");

                    b.Property<string>("CampoCambiado");

                    b.Property<string>("Comentario");

                    b.Property<DateTime>("Fecha");

                    b.Property<DateTime>("InsertDatetime");

                    b.Property<string>("InsertOper");

                    b.Property<string>("InsertUser");

                    b.Property<string>("NombreAdjunto");

                    b.Property<string>("NotasTrabajo");

                    b.Property<string>("OperadorId");

                    b.Property<int>("SeqTicketId");

                    b.Property<string>("TipoAdjunto");

                    b.Property<string>("UsuarioId");

                    b.Property<string>("ValorActual");

                    b.Property<string>("ValorAnterior");

                    b.Property<int>("Visible");

                    b.HasKey("SeqSigoTicketId");

                    b.ToTable("SigoTicket");
                });

            modelBuilder.Entity("Model.DB_Model.Ticket", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Adjunto");

                    b.Property<int>("Area_Id");

                    b.Property<string>("Asignado_A");

                    b.Property<string>("Asignado_A_Sector");

                    b.Property<string>("Calificacion");

                    b.Property<string>("Comentarios");

                    b.Property<string>("EMail");

                    b.Property<int>("Estado");

                    b.Property<DateTime>("Fecha");

                    b.Property<DateTime>("Fecha_Entrega");

                    b.Property<DateTime>("Fecha_Ultimo_Estado");

                    b.Property<int>("Id_Componente");

                    b.Property<int>("Id_EquipoPrinc");

                    b.Property<int>("Id_EquipoSec");

                    b.Property<int>("Id_Planta");

                    b.Property<string>("Incidente");

                    b.Property<DateTime>("Insert_Datetime");

                    b.Property<string>("Insert_Oper");

                    b.Property<string>("Nombre_Adjunto");

                    b.Property<string>("Nombre_completo");

                    b.Property<string>("Numero_Ticket");

                    b.Property<string>("Operador_Id");

                    b.Property<string>("Operador_Sector_Id");

                    b.Property<string>("Operador_Ultimo_Estado");

                    b.Property<int>("Prioridad");

                    b.Property<int>("Privado");

                    b.Property<int>("Proceso");

                    b.Property<string>("Ruta_Adjunto");

                    b.Property<string>("Telefono");

                    b.Property<string>("Tipo_Adjunto");

                    b.Property<int>("Tipo_Trabajo");

                    b.Property<string>("Ubicacion");

                    b.Property<DateTime>("Update_Datetime");

                    b.Property<string>("Update_Oper");

                    b.Property<string>("Usuario_Id");

                    b.HasKey("Id");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Model.DB_Model.TipoTrabajo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Estado");

                    b.Property<DateTime>("Fecha_Insercion");

                    b.Property<DateTime>("Fecha_Modificacion");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("TipoTrabajo");
                });

            modelBuilder.Entity("Model.DB_Model.Usuarios", b =>
                {
                    b.Property<long>("IdUsuario")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Activo");

                    b.Property<int>("AreaId");

                    b.Property<int>("CambioClave");

                    b.Property<string>("EMail");

                    b.Property<DateTime>("FechaModificacion");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<string>("NombreCompleto");

                    b.Property<string>("Password");

                    b.Property<string>("Telefono");

                    b.Property<string>("Ubicacion");

                    b.Property<string>("Username");

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Model.Auth.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("Enabled");

                    b.ToTable("ApplicationRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("Model.Auth.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("Area");

                    b.Property<string>("Extension");

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<string>("Telefono");

                    b.Property<string>("Ubicacion");

                    b.ToTable("ApplicationUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Model.Auth.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");


                    b.ToTable("ApplicationUserRole");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
